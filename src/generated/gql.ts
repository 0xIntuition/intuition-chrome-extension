/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nquery GetMyPosition($id: numeric!, $address: String) {\n  positions(\n    where: { account_id: { _eq: $address }, vault_id: { _eq: $id } }\n    limit: 1\n  ) {\n    shares\n  }\n}\n": types.GetMyPositionDocument,
    "\nquery GetThings($url: String, $address: String) {\n  things(where: { url: { _eq: $url } }) {\n    id\n    url\n    name\n    image\n    atom {\n      id\n      value {\n        thing {\n          description\n        }\n      }\n      vault {\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions(order_by: { shares: desc }, limit: 5) {\n          shares\n          account {\n            id\n            type\n            image\n            label\n          }\n        }\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          myPosition: positions(\n            limit: 1\n            where: { account_id: { _eq: $address } }\n          ) {\n            shares\n            account_id\n          }\n          positions {\n            shares\n            account_id\n          }\n        }\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          myPosition: positions(\n            limit: 1\n            where: { account_id: { _eq: $address } }\n          ) {\n            shares\n            account_id\n          }\n          positions {\n            shares\n            account_id\n          }\n        }\n      }\n    }\n  }\n}": types.GetThingsDocument,
    "\nquery GetThingsExtended($url: String) {\n  things(where: { url: { _eq: $url } }) {\n    id\n    url\n    name\n    image\n    atom {\n      value {\n        thing {\n          description\n        }\n      }\n      vault {\n        position_count\n        total_shares\n        current_share_price\n        positions {\n          shares\n          account {\n            id\n            type\n            image\n            label\n          }\n        }\n      }\n      as_subject_triples {\n        id\n        subject {\n          id\n          label\n          emoji\n          image\n        }\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          positions {\n            shares\n            account {\n              id\n              label\n            }\n          }\n        }\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          positions {\n            shares\n            account {\n              id\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetThingsExtendedDocument,
    "\nquery GetMyPositions($address: String) {\n  positions(where: { account_id: { _eq: $address } }) {\n    id\n    shares\n    vault {\n      position_count\n      total_shares\n      current_share_price\n      atom {\n        id\n        label\n        image\n      }\n      triple {\n        id\n        subject {\n          id\n          image\n          label\n          value {\n            thing {\n              url\n            }\n          }\n        }\n        predicate {\n          id\n          image\n          label\n        }\n        object {\n          id\n          image\n          label\n        }\n      }\n    }\n  }\n}\n": types.GetMyPositionsDocument,
    "\nquery SearchAtoms($label: String!) {\n  atoms(\n    order_by: { block_timestamp: desc }\n    limit: 30\n    where: {\n      type: { _in: [\"Thing\", \"Person\", \"Organization\"] }\n      label: { _ilike: $label }\n    }\n  ) {\n    id\n    image\n    label\n  }\n}\n": types.SearchAtomsDocument,
    "\nquery GetAccountProfile($address: String!) {\n  account(id: $address) {\n    image\n    label\n    id\n  }\n}\n": types.GetAccountProfileDocument,
    "\nquery GetAccountInfo($address: String!) {\n  account(id: $address) {\n    image\n    label\n    id\n    positions(where: { account_id: { _eq: $address } }) {\n      id\n      shares\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        atom {\n          id\n          label\n          image\n        }\n        triple {\n          id\n          subject {\n            id\n            image\n            label\n          }\n          predicate {\n            id\n            image\n            label\n          }\n          object {\n            id\n            image\n            label\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetAccountInfoDocument,
    "\nquery ClaimsFromFollowingAboutSubject($address: String!, $subjectId: numeric!) {\n  claims_from_following(\n    args: { address: $address }\n    where: { subject_id: { _eq: $subjectId } }\n  ) {\n    shares\n    counter_shares\n    triple {\n      id\n      vault_id\n      counter_vault_id\n      subject {\n        emoji\n        label\n        image\n        id\n      }\n      predicate {\n        emoji\n        label\n        image\n        id\n      }\n      object {\n        emoji\n        label\n        image\n        id\n      }\n      counter_vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n      }\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n      }\n    }\n    account {\n      id\n      label\n    }\n  }\n}\n": types.ClaimsFromFollowingAboutSubjectDocument,
    "\nquery SearchAtomsByUri($uri: String, $address: String) {\n  atoms(\n    where: {\n      _or: [\n        { data: { _eq: $uri } }\n        { value: { thing: { url: { _eq: $uri } } } }\n        { value: { person: { url: { _eq: $uri } } } }\n        { value: { organization: { url: { _eq: $uri } } } }\n        { value: { book: { url: { _eq: $uri } } } }\n      ]\n    }\n  ) {\n    id\n    data\n    type\n    label\n    image\n    emoji\n    value {\n      person {\n        name\n        image\n        description\n        email\n        identifier\n      }\n      thing {\n        url\n        name\n        image\n        description\n      }\n      organization {\n        name\n        email\n        description\n        url\n      }\n    }\n    vault {\n      position_count\n      total_shares\n      current_share_price\n      myPosition: positions(limit: 1, where: { account_id: { _eq: $address } }) {\n        shares\n        account_id\n      }\n      positions(order_by: { shares: desc }, limit: 5) {\n        shares\n        account {\n          id\n          type\n          image\n          label\n        }\n      }\n    }\n    as_subject_triples {\n      id\n      object {\n        id\n        label\n        emoji\n        image\n      }\n      predicate {\n        emoji\n        label\n        image\n        id\n      }\n      counter_vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions {\n          shares\n          account_id\n        }\n      }\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions {\n          shares\n          account_id\n        }\n      }\n    }\n  }\n}": types.SearchAtomsByUriDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetMyPosition($id: numeric!, $address: String) {\n  positions(\n    where: { account_id: { _eq: $address }, vault_id: { _eq: $id } }\n    limit: 1\n  ) {\n    shares\n  }\n}\n"): (typeof documents)["\nquery GetMyPosition($id: numeric!, $address: String) {\n  positions(\n    where: { account_id: { _eq: $address }, vault_id: { _eq: $id } }\n    limit: 1\n  ) {\n    shares\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetThings($url: String, $address: String) {\n  things(where: { url: { _eq: $url } }) {\n    id\n    url\n    name\n    image\n    atom {\n      id\n      value {\n        thing {\n          description\n        }\n      }\n      vault {\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions(order_by: { shares: desc }, limit: 5) {\n          shares\n          account {\n            id\n            type\n            image\n            label\n          }\n        }\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          myPosition: positions(\n            limit: 1\n            where: { account_id: { _eq: $address } }\n          ) {\n            shares\n            account_id\n          }\n          positions {\n            shares\n            account_id\n          }\n        }\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          myPosition: positions(\n            limit: 1\n            where: { account_id: { _eq: $address } }\n          ) {\n            shares\n            account_id\n          }\n          positions {\n            shares\n            account_id\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery GetThings($url: String, $address: String) {\n  things(where: { url: { _eq: $url } }) {\n    id\n    url\n    name\n    image\n    atom {\n      id\n      value {\n        thing {\n          description\n        }\n      }\n      vault {\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions(order_by: { shares: desc }, limit: 5) {\n          shares\n          account {\n            id\n            type\n            image\n            label\n          }\n        }\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          myPosition: positions(\n            limit: 1\n            where: { account_id: { _eq: $address } }\n          ) {\n            shares\n            account_id\n          }\n          positions {\n            shares\n            account_id\n          }\n        }\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          myPosition: positions(\n            limit: 1\n            where: { account_id: { _eq: $address } }\n          ) {\n            shares\n            account_id\n          }\n          positions {\n            shares\n            account_id\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetThingsExtended($url: String) {\n  things(where: { url: { _eq: $url } }) {\n    id\n    url\n    name\n    image\n    atom {\n      value {\n        thing {\n          description\n        }\n      }\n      vault {\n        position_count\n        total_shares\n        current_share_price\n        positions {\n          shares\n          account {\n            id\n            type\n            image\n            label\n          }\n        }\n      }\n      as_subject_triples {\n        id\n        subject {\n          id\n          label\n          emoji\n          image\n        }\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          positions {\n            shares\n            account {\n              id\n              label\n            }\n          }\n        }\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          positions {\n            shares\n            account {\n              id\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetThingsExtended($url: String) {\n  things(where: { url: { _eq: $url } }) {\n    id\n    url\n    name\n    image\n    atom {\n      value {\n        thing {\n          description\n        }\n      }\n      vault {\n        position_count\n        total_shares\n        current_share_price\n        positions {\n          shares\n          account {\n            id\n            type\n            image\n            label\n          }\n        }\n      }\n      as_subject_triples {\n        id\n        subject {\n          id\n          label\n          emoji\n          image\n        }\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          positions {\n            shares\n            account {\n              id\n              label\n            }\n          }\n        }\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          positions {\n            shares\n            account {\n              id\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetMyPositions($address: String) {\n  positions(where: { account_id: { _eq: $address } }) {\n    id\n    shares\n    vault {\n      position_count\n      total_shares\n      current_share_price\n      atom {\n        id\n        label\n        image\n      }\n      triple {\n        id\n        subject {\n          id\n          image\n          label\n          value {\n            thing {\n              url\n            }\n          }\n        }\n        predicate {\n          id\n          image\n          label\n        }\n        object {\n          id\n          image\n          label\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetMyPositions($address: String) {\n  positions(where: { account_id: { _eq: $address } }) {\n    id\n    shares\n    vault {\n      position_count\n      total_shares\n      current_share_price\n      atom {\n        id\n        label\n        image\n      }\n      triple {\n        id\n        subject {\n          id\n          image\n          label\n          value {\n            thing {\n              url\n            }\n          }\n        }\n        predicate {\n          id\n          image\n          label\n        }\n        object {\n          id\n          image\n          label\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery SearchAtoms($label: String!) {\n  atoms(\n    order_by: { block_timestamp: desc }\n    limit: 30\n    where: {\n      type: { _in: [\"Thing\", \"Person\", \"Organization\"] }\n      label: { _ilike: $label }\n    }\n  ) {\n    id\n    image\n    label\n  }\n}\n"): (typeof documents)["\nquery SearchAtoms($label: String!) {\n  atoms(\n    order_by: { block_timestamp: desc }\n    limit: 30\n    where: {\n      type: { _in: [\"Thing\", \"Person\", \"Organization\"] }\n      label: { _ilike: $label }\n    }\n  ) {\n    id\n    image\n    label\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAccountProfile($address: String!) {\n  account(id: $address) {\n    image\n    label\n    id\n  }\n}\n"): (typeof documents)["\nquery GetAccountProfile($address: String!) {\n  account(id: $address) {\n    image\n    label\n    id\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAccountInfo($address: String!) {\n  account(id: $address) {\n    image\n    label\n    id\n    positions(where: { account_id: { _eq: $address } }) {\n      id\n      shares\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        atom {\n          id\n          label\n          image\n        }\n        triple {\n          id\n          subject {\n            id\n            image\n            label\n          }\n          predicate {\n            id\n            image\n            label\n          }\n          object {\n            id\n            image\n            label\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetAccountInfo($address: String!) {\n  account(id: $address) {\n    image\n    label\n    id\n    positions(where: { account_id: { _eq: $address } }) {\n      id\n      shares\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        atom {\n          id\n          label\n          image\n        }\n        triple {\n          id\n          subject {\n            id\n            image\n            label\n          }\n          predicate {\n            id\n            image\n            label\n          }\n          object {\n            id\n            image\n            label\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ClaimsFromFollowingAboutSubject($address: String!, $subjectId: numeric!) {\n  claims_from_following(\n    args: { address: $address }\n    where: { subject_id: { _eq: $subjectId } }\n  ) {\n    shares\n    counter_shares\n    triple {\n      id\n      vault_id\n      counter_vault_id\n      subject {\n        emoji\n        label\n        image\n        id\n      }\n      predicate {\n        emoji\n        label\n        image\n        id\n      }\n      object {\n        emoji\n        label\n        image\n        id\n      }\n      counter_vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n      }\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n      }\n    }\n    account {\n      id\n      label\n    }\n  }\n}\n"): (typeof documents)["\nquery ClaimsFromFollowingAboutSubject($address: String!, $subjectId: numeric!) {\n  claims_from_following(\n    args: { address: $address }\n    where: { subject_id: { _eq: $subjectId } }\n  ) {\n    shares\n    counter_shares\n    triple {\n      id\n      vault_id\n      counter_vault_id\n      subject {\n        emoji\n        label\n        image\n        id\n      }\n      predicate {\n        emoji\n        label\n        image\n        id\n      }\n      object {\n        emoji\n        label\n        image\n        id\n      }\n      counter_vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n      }\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n      }\n    }\n    account {\n      id\n      label\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery SearchAtomsByUri($uri: String, $address: String) {\n  atoms(\n    where: {\n      _or: [\n        { data: { _eq: $uri } }\n        { value: { thing: { url: { _eq: $uri } } } }\n        { value: { person: { url: { _eq: $uri } } } }\n        { value: { organization: { url: { _eq: $uri } } } }\n        { value: { book: { url: { _eq: $uri } } } }\n      ]\n    }\n  ) {\n    id\n    data\n    type\n    label\n    image\n    emoji\n    value {\n      person {\n        name\n        image\n        description\n        email\n        identifier\n      }\n      thing {\n        url\n        name\n        image\n        description\n      }\n      organization {\n        name\n        email\n        description\n        url\n      }\n    }\n    vault {\n      position_count\n      total_shares\n      current_share_price\n      myPosition: positions(limit: 1, where: { account_id: { _eq: $address } }) {\n        shares\n        account_id\n      }\n      positions(order_by: { shares: desc }, limit: 5) {\n        shares\n        account {\n          id\n          type\n          image\n          label\n        }\n      }\n    }\n    as_subject_triples {\n      id\n      object {\n        id\n        label\n        emoji\n        image\n      }\n      predicate {\n        emoji\n        label\n        image\n        id\n      }\n      counter_vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions {\n          shares\n          account_id\n        }\n      }\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions {\n          shares\n          account_id\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery SearchAtomsByUri($uri: String, $address: String) {\n  atoms(\n    where: {\n      _or: [\n        { data: { _eq: $uri } }\n        { value: { thing: { url: { _eq: $uri } } } }\n        { value: { person: { url: { _eq: $uri } } } }\n        { value: { organization: { url: { _eq: $uri } } } }\n        { value: { book: { url: { _eq: $uri } } } }\n      ]\n    }\n  ) {\n    id\n    data\n    type\n    label\n    image\n    emoji\n    value {\n      person {\n        name\n        image\n        description\n        email\n        identifier\n      }\n      thing {\n        url\n        name\n        image\n        description\n      }\n      organization {\n        name\n        email\n        description\n        url\n      }\n    }\n    vault {\n      position_count\n      total_shares\n      current_share_price\n      myPosition: positions(limit: 1, where: { account_id: { _eq: $address } }) {\n        shares\n        account_id\n      }\n      positions(order_by: { shares: desc }, limit: 5) {\n        shares\n        account {\n          id\n          type\n          image\n          label\n        }\n      }\n    }\n    as_subject_triples {\n      id\n      object {\n        id\n        label\n        emoji\n        image\n      }\n      predicate {\n        emoji\n        label\n        image\n        id\n      }\n      counter_vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions {\n          shares\n          account_id\n        }\n      }\n      vault {\n        id\n        position_count\n        total_shares\n        current_share_price\n        myPosition: positions(\n          limit: 1\n          where: { account_id: { _eq: $address } }\n        ) {\n          shares\n          account_id\n        }\n        positions {\n          shares\n          account_id\n        }\n      }\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;